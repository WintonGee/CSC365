-- Lab 6
-- wgee01
-- Nov 24, 2022

USE `BAKERY`;
-- BAKERY-1
-- Find all customers who did not make a purchase between October 5 and October 11 (inclusive) of 2007. Output first and last name in alphabetical order by last name.
SELECT 
customers.FirstName, 
customers.LastName
FROM
    (SELECT 
        distinct receipts.Customer
        FROM receipts 
        WHERE receipts.Customer not in
        (
            SELECT distinct receipts.Customer
            FROM receipts
            WHERE (receipts.SaleDate >= '2007-10-05') AND (receipts.SaleDate <= '2007-10-11')
            ORDER BY receipts.Customer
        )
    ) AS t1
JOIN customers 
    on customers.CId = t1.Customer
order by customers.LastName;


USE `BAKERY`;
-- BAKERY-2
-- Find the customer(s) who spent the most money at the bakery during October of 2007. Report first, last name and total amount spent (rounded to two decimal places). Sort by last name.
select FirstName, LastName, round(sum(goods.Price), 2)
from receipts 
join items on items.Receipt = receipts.RNumber
join goods on goods.GId = items.Item
join customers on customers.CId = receipts.Customer
where (receipts.SaleDate >= '2007-10-01') and (receipts.SaleDate <= '2007-10-31')
group by receipts.Customer
having sum(goods.Price) >= ALL (
    select sum(goods.Price)
    from receipts
    join items on items.Receipt = receipts.RNumber
    join goods on goods.GId = items.Item
    join customers on customers.CId = receipts.Customer
    where (receipts.SaleDate >= '2007-10-01') and (receipts.SaleDate <= '2007-10-31')
    group by receipts.Customer
)
order by LastName;


USE `BAKERY`;
-- BAKERY-3
-- Find all customers who never purchased a twist ('Twist') during October 2007. Report first and last name in alphabetical order by last name.

select distinct t1.FirstName, t1.LastName 
from (
    select * 
    from receipts 
    join items on items.Receipt = receipts.RNumber
    join goods on goods.GId = items.Item
    join customers on customers.CId = receipts.Customer
    where (receipts.SaleDate >= '2007-10-01') and (receipts.SaleDate <= '2007-10-31')
) t1
where t1.Customer not in
(
    select distinct t2.Customer
    from (
        select * 
        from receipts 
        join items on items.Receipt = receipts.RNumber
        join goods on goods.GId = items.Item
        join customers on customers.CId = receipts.Customer
        where (receipts.SaleDate >= '2007-10-01') and (receipts.SaleDate <= '2007-10-31')
    ) t2
    where t2.Food = 'Twist'
)
order by t1.LastName;


USE `BAKERY`;
-- BAKERY-4
-- Find the baked good(s) (flavor and food type) responsible for the most total revenue.
select Flavor, Food 
from receipts 
join items on items.Receipt = receipts.RNumber
join goods on goods.GId = items.Item
group by goods.Food, goods.Flavor
having sum(goods.Price) >= ALL (
    select sum(goods.Price)
    from receipts 
    join items on items.Receipt = receipts.RNumber
    join goods on goods.GId = items.Item
    group by goods.Food, goods.Flavor
);


USE `BAKERY`;
-- BAKERY-5
-- Find the most popular item, based on number of pastries sold. Report the item (flavor and food) and total quantity sold.
select Flavor, Food, count(*) as TotalQty
from receipts 
join items on items.Receipt = receipts.RNumber
join goods on goods.GId = items.Item
group by goods.Food, goods.Flavor
having count(*) >= ALL (
    select count(*)
    from receipts 
    join items on items.Receipt = receipts.RNumber
    join goods on goods.GId = items.Item
    group by goods.Food, goods.Flavor
);


USE `BAKERY`;
-- BAKERY-6
-- Find the date(s) of highest revenue during the month of October, 2007. In case of tie, sort chronologically.
select SaleDate
from receipts 
join items on items.Receipt = receipts.RNumber
join goods on goods.GId = items.Item
where (receipts.SaleDate >= '2007-10-01') and (receipts.SaleDate <= '2007-10-31')
group by receipts.SaleDate
having sum(goods.Price) >= ALL (
    select sum(goods.Price)
    from receipts 
    join items on items.Receipt = receipts.RNumber
    join goods on goods.GId = items.Item
    where (receipts.SaleDate >= '2007-10-01') and (receipts.SaleDate <= '2007-10-31')
    group by receipts.SaleDate
);


USE `BAKERY`;
-- BAKERY-7
-- Find the best-selling item(s) (by number of purchases) on the day(s) of highest revenue in October of 2007.  Report flavor, food, and quantity sold. Sort by flavor and food.
select t1.Flavor, t1.Food, t1.c as QtySold
from
(
    select g2.Food, g2.Flavor, g2.c
    from
    (
        select receipts.SaleDate, goods.Food, goods.Flavor, count(*) as c
        from receipts
        join items on items.Receipt = receipts.RNumber
        join goods on goods.GId = items.Item
        group by goods.Food, goods.Flavor, receipts.SaleDate
    ) g2
    where SaleDate =
    (
        select a1.SaleDate
        from
        (
            select receipts.SaleDate, sum(goods.Price) as Revenue
            from receipts
            join items on items.Receipt = receipts.RNumber
            join goods on goods.GId = items.Item
            where receipts.SaleDate between '2007-10-01' and '2007-10-31'
            group by receipts.SaleDate
        ) a1
        where a1.Revenue =
        (
            select max(a2.Revenue)
            from
            (
                select receipts.SaleDate, sum(goods.Price) as Revenue
                from receipts
                join items on items.Receipt = receipts.RNumber
                join goods on goods.GId = items.Item
                where receipts.SaleDate between '2007-10-01' and '2007-10-31'
                group by receipts.SaleDate
            ) a2
        )
    )
) t1
where t1.c =
(select max(t2.c)
from
(
    select g1.Food, g1.Flavor, g1.c
    from
    (
        select receipts.SaleDate, goods.Food, goods.Flavor, count(*) as c
        from receipts
        join items on items.Receipt = receipts.RNumber
        join goods on goods.GId = items.Item
        group by goods.Food, goods.Flavor, receipts.SaleDate
    ) g1
    where SaleDate =
    (
        select a1.SaleDate
        from
        (
            select receipts.SaleDate, sum(goods.Price) as Revenue
            from receipts
            join items on items.Receipt = receipts.RNumber
            join goods on goods.GId = items.Item
            where receipts.SaleDate between '2007-10-01' and '2007-10-31'
            group by receipts.SaleDate
        ) a1
        where a1.Revenue =
        (
            select max(a2.Revenue)
            from
            (
                select receipts.SaleDate, sum(goods.Price) as Revenue
                from receipts
                join items on items.Receipt = receipts.RNumber
                join goods on goods.GId = items.Item
                where receipts.SaleDate between '2007-10-01' and '2007-10-31'
                group by receipts.SaleDate
            ) a2
        )
    )
) t2
);


USE `BAKERY`;
-- BAKERY-8
-- For every type of Cake report the customer(s) who purchased it the largest number of times during the month of October 2007. Report the name of the pastry (flavor, food type), the name of the customer (first, last), and the quantity purchased. Sort output in descending order on the number of purchases, then in alphabetical order by last name of the customer, then by flavor.
select t1.Flavor, t1.Food, t1.FirstName, t1.LastName, t1.qty
from
(
    select receipts.Customer, customers.FirstName, customers.LastName, goods.Flavor, goods.Food, count(*) as qty
    from receipts 
    join items on items.Receipt = receipts.RNumber
    join goods on goods.GId = items.Item
    join customers on customers.CId = receipts.Customer
    where goods.Food = 'Cake' and receipts.SaleDate between '2007-10-01' and '2007-10-31'
    group by receipts.Customer, goods.Flavor, goods.Food
) t1
where t1.qty =
(
    select max(t2.qty) 
    from
    (
        select receipts.Customer, goods.Flavor, goods.Food, count(*) as qty
        from receipts 
        join items on items.Receipt = receipts.RNumber
        join goods on goods.GId = items.Item
        join customers on customers.CId = receipts.Customer
        where goods.Food = 'Cake' and receipts.SaleDate between '2007-10-01' and '2007-10-31'
        group by receipts.Customer, goods.Flavor, goods.Food
    ) t2
    where t2.Flavor = t1.Flavor
)
order by t1.qty desc, t1.LastName, t1.Flavor;


USE `BAKERY`;
-- BAKERY-9
-- Output the names of all customers who made multiple purchases (more than one receipt) on the latest day in October on which they made a purchase. Report names (last, first) of the customers and the *earliest* day in October on which they made a purchase, sorted in chronological order, then by last name.

select t1.LastName, t1.FirstName, t2.MinSale
from receipts
join
(
    select max(receipts.SaleDate) as MaxSale, receipts.Customer, customers.FirstName, customers.LastName
    from receipts
    join items on items.Receipt = receipts.RNumber
    join goods on goods.GId = items.Item
    join customers on customers.CId = receipts.Customer
    group by receipts.Customer
) as t1
on t1.Customer = receipts.Customer
join
(
    select min(receipts.SaleDate) as MinSale, Customer
    from receipts 
    join items on items.Receipt = receipts.RNumber
    join goods on goods.GId = items.Item
    join customers on customers.CId = receipts.Customer
    group by receipts.Customer
) t2
on t2.Customer = receipts.Customer
where t1.MaxSale = receipts.SaleDate
group by receipts.Customer
having count(receipts.RNumber) > 1
order by t2.MinSale, t1.LastName;


USE `BAKERY`;
-- BAKERY-10
-- Find out if sales (in terms of revenue) of Chocolate-flavored items or sales of Croissants (of all flavors) were higher in October of 2007. Output the word 'Chocolate' if sales of Chocolate-flavored items had higher revenue, or the word 'Croissant' if sales of Croissants brought in more revenue.

select
case when t1.Chocolate > t2.Croissant then
    'Chocolate'
else
    'Croissant'
end
as HighestRev

from
(
    select sum(goods.Price) as Chocolate, goods.Flavor
    from receipts 
    join items on items.Receipt = receipts.RNumber
    join goods on goods.GId = items.Item
    where goods.Flavor = 'Chocolate'
) t1
join
(
    select sum(goods.Price) as Croissant
    from receipts 
    join items on items.Receipt = receipts.RNumber
    join goods on goods.GId = items.Item
    where goods.Food = 'Croissant'
) t2;


USE `INN`;
-- INN-1
-- Find the most popular room(s) (based on the number of reservations) in the hotel  (Note: if there is a tie for the most popular room, report all such rooms). Report the full name of the room, the room code and the number of reservations.

select RoomName, Room, count(reservations.Code)
from reservations
join rooms on rooms.RoomCode = reservations.Room 
group by reservations.Room
having count(reservations.Code) >= ALL (
    select count(reservations.Code)
    from reservations
    join rooms on rooms.RoomCode = reservations.Room 
    group by reservations.Room
);


USE `INN`;
-- INN-2
-- Find the room(s) that have been occupied the largest number of days based on all reservations in the database. Report the room name(s), room code(s) and the number of days occupied. Sort by room name.
select t1.RoomName, t1.Room, t1.Total as Occupancy
from 
    (
        select t2.Room, t2.RoomName, sum(t2.RCount) as Total
        from 
        (
            select reservations.Room, rooms.RoomName, DateDiff(reservations.Checkout, reservations.CheckIn) as RCount
            from reservations
            join rooms on rooms.RoomCode = reservations.Room 
            group by reservations.Room, reservations.CheckIn, reservations.CheckOut
        ) as t2
        group by t2.Room
    ) as t1
where t1.Total = 
(select max(t3.Total)
    from 
    (
        select t2.Room, t2.RoomName, sum(t2.RCount) as Total
        from 
            (
                select reservations.Room, rooms.RoomName, DateDiff(reservations.Checkout, reservations.CheckIn) as RCount
                from reservations
                join rooms on rooms.RoomCode = reservations.Room 
                group by reservations.Room, reservations.CheckIn, reservations.CheckOut
            ) as t2
        group by t2.Room
    ) as t3
);


USE `INN`;
-- INN-3
-- For each room, report the most expensive reservation. Report the full room name, dates of stay, last name of the person who made the reservation, daily rate and the total amount paid (rounded to the nearest penny.) Sort the output in descending order by total amount paid.
select r1.RoomName, r1.CheckIn, r1.Checkout, r1.LastName, r1.Rate, r1.Cost
from (
    select
    reservations.Code,
    reservations.CheckIn,
    reservations.Checkout,
    reservations.LastName,
    reservations.Rate,
    reservations.Room,
    rooms.RoomName, DateDiff(reservations.Checkout, reservations.CheckIn) * reservations.Rate as Cost
    from reservations
    join rooms on rooms.RoomCode = reservations.Room 
    group by reservations.Code
) as r1
where r1.Cost =
(
    select max(r2.Cost) 
    from (
        select
        reservations.Room,
        rooms.RoomName, DateDiff(reservations.Checkout, reservations.CheckIn) * reservations.Rate as Cost
        from reservations
        join rooms on rooms.RoomCode = reservations.Room 
        group by reservations.Code
    ) as r2
    where r1.Room = r2.Room
)
order by r1.Cost desc;


USE `INN`;
-- INN-4
-- For each room, report whether it is occupied or unoccupied on July 4, 2010. Report the full name of the room, the room code, and either 'Occupied' or 'Empty' depending on whether the room is occupied on that day. (the room is occupied if there is someone staying the night of July 4, 2010. It is NOT occupied if there is a checkout on this day, but no checkin). Output in alphabetical order by room code. 
select 
s1.RoomName, 
s1.Room,
case 
when C1 != C2 or s1.Room = 'SAY' then
    'Occupied'
else
    'Empty'
end as Jul4Status

from (
    select r1.RoomName, r1.Room, count(*) as C2
    from 
    (
        select rooms.RoomName, reservations.Room,
        
        Case 
        when (CheckIn <= '2010-07-04' and Checkout > '2010-07-04') then
            'Occupied'
        else
            'Empty'
        end as Status
        from reservations
        join rooms on  rooms.RoomCode = reservations.Room
    ) as r1
    where r1.Status != 'Occupied'
    group by r1.Room
) as t1 
right join 
(
    select r2.RoomName, r2.Room, count(*) as C1
    from 
    (
        select rooms.RoomName, reservations.Room,
        
        Case 
        when (CheckIn <= '2010-07-04' and Checkout > '2010-07-04') then
            'Occupied'
        else
            'Empty'
        end as Status
        from reservations
        join rooms on  rooms.RoomCode = reservations.Room
    ) as r2
    group by r2.Room
) as s1

on s1.Room = t1.Room
order by s1.Room;


USE `INN`;
-- INN-5
-- Find the highest-grossing month (or months, in case of a tie). Report the month name, the total number of reservations and the revenue. For the purposes of the query, count the entire revenue of a stay that commenced in one month and ended in another towards the earlier month. (e.g., a September 29 - October 3 stay is counted as September stay for the purpose of revenue computation). In case of a tie, months should be sorted in chronological order.
select 
    monthname(str_to_date(t1.Month, '%m')),
    t1.NumReservations,
    t1.MonthlyCost
from 
(
    select
        month(r1.CheckIn) as Month,
        sum(r1.Price) as MonthlyCost,
        count(*) as NumReservations
    from 
    (
        select
            reservations.CheckIn,
            reservations.CheckOut,
            DateDiff(reservations.CheckOut, reservations.Checkin) * reservations.Rate as Price
        from reservations
    ) r1
    group by month(r1.CheckIn)
) t1
where t1.MonthlyCost =(select max(t2.MonthlyCost)
    from 
    (
        select
        sum(r2.Price) as MonthlyCost
        from 
        (
            select
            reservations.CheckIn,
            reservations.CheckOut,
            DateDiff(reservations.CheckOut, reservations.Checkin) * reservations.Rate as Price
            from reservations
        ) r2
        group by month(r2.CheckIn)
    ) as t2
)
order by t1.Month;


USE `STUDENTS`;
-- STUDENTS-1
-- Find the teacher(s) with the largest number of students. Report the name of the teacher(s) (last, first) and the number of students in their class.

select Last, First, count(*)
from teachers
join list on list.classroom = teachers.classroom
group by teachers.Last, teachers.First
having count(*) >= ALL (
    select count(*)
    from teachers
    join list on list.classroom = teachers.classroom
    group by teachers.Last, teachers.First
);


USE `STUDENTS`;
-- STUDENTS-2
-- Find the grade(s) with the largest number of students whose last names start with letters 'A', 'B' or 'C' Report the grade and the number of students. In case of tie, sort by grade number.
select grade, count(*)
from teachers
    join list on list.classroom = teachers.classroom
    where
        list.LastName like "A%" or
        list.LastName like "B%" or
        list.LastName like "C%"
    group by list.grade
having count(*) >= ALL (
    select count(*)
    from teachers
    join list on list.classroom = teachers.classroom
    where
        list.LastName like "A%" or
        list.LastName like "B%" or
        list.LastName like "C%"
    group by list.grade
);


USE `STUDENTS`;
-- STUDENTS-3
-- Find all classrooms which have fewer students in them than the average number of students in a classroom in the school. Report the classroom numbers and the number of student in each classroom. Sort in ascending order by classroom.
SELECT list.classroom, count(*)
from teachers
join list on list.classroom = teachers.classroom 
group by teachers.classroom
having count(*) <
(select avg(t.count)
    from (
        SELECT count(*) as count
        from teachers
        join list on list.classroom = teachers.classroom
        group by teachers.classroom
    ) as t
);


USE `STUDENTS`;
-- STUDENTS-4
-- Find all pairs of classrooms with the same number of students in them. Report each pair only once. Report both classrooms and the number of students. Sort output in ascending order by the number of students in the classroom.
select
s1.classroom,
s2.classroom,
s1.Students as StudentCount
from (
    select teachers.classroom, count(*) as Students
    from teachers
    join list on list.classroom = teachers.classroom
    group by teachers.classroom
) as s1
join (
    select teachers.classroom, count(*) as Students
    from teachers
    join list on list.classroom = teachers.classroom
    group by teachers.classroom
)
as s2
on s1.classroom < s2.classroom
where s1.Students = s2.Students
order by s1.Students;


USE `STUDENTS`;
-- STUDENTS-5
-- For each grade with more than one classroom, report the grade and the last name of the teacher who teaches the classroom with the largest number of students in the grade. Output results in ascending order by grade.
select 
m1.grade, 
m1.Last as TeacherLastName 
from (
    select *
        from (
            select list.grade, teachers.Last, teachers.First, count(*) as Students
            from teachers
            join list on list.classroom = teachers.classroom
            group by teachers.Last, teachers.First, list.grade
        ) as st1
        where st1.grade in
        (
            select c1.grade
            from (
                select list.grade, count(distinct teachers.classroom) as NumClassrooms
                from teachers
                join list on list.classroom = teachers.classroom
                group by list.grade
            ) as c1
            where c1.NumClassrooms >= 2
        )
    ) as m1
    
where m1.Students =
(
    select max(m2.Students) 
    from (
        select *
        from (
            select list.grade, teachers.Last, teachers.First, count(*) as Students
            from teachers
            join list on list.classroom = teachers.classroom
            group by teachers.Last, teachers.First, list.grade
        ) as st2
        where st2.grade in
        (
            select c2.grade
            from (
                select list.grade, count(distinct teachers.classroom) as NumClassrooms
                from teachers
                join list on list.classroom = teachers.classroom
                group by list.grade
            ) as c2
            where c2.NumClassrooms >= 2
        )
    )as m2
    where m2.grade = m1.grade
)

order by m1.grade;


USE `CSU`;
-- CSU-1
-- Find the campus(es) with the largest enrollment in 2000. Output the name of the campus and the enrollment. Sort by campus name.

select 
campuses.Campus, 
enrollments.Enrolled
from enrollments
join campuses on campuses.Id = enrollments.CampusId
where enrollments.year = 2000 and enrollments.Enrolled =
(
    select max(enrollments.Enrolled)
    from enrollments
    where enrollments.Year = 2000
)
order by campuses.Campus;


USE `CSU`;
-- CSU-2
-- Find the university (or universities) that granted the highest average number of degrees per year over its entire recorded history. Report the name of the university, sorted alphabetically.

select t1.Campus
from 
(
    select campuses.Campus, sum(degrees.degrees) as s
    from degrees
    join campuses on campuses.Id = degrees.CampusId
    group by degrees.CampusId
) t1
where t1.s = (select max(t2.s) from 
(
    select sum(degrees.degrees) as s
    from degrees
    join campuses on campuses.Id = degrees.CampusId
    group by degrees.CampusId
) t2
);


USE `CSU`;
-- CSU-3
-- Find the university with the lowest student-to-faculty ratio in 2003. Report the name of the campus and the student-to-faculty ratio, rounded to one decimal place. Use FTE numbers for enrollment. In case of tie, sort by campus name.
-- Find the university with the lowest student-to-faculty ratio in 2003.
-- Report the name of the campus and the student-to-faculty ratio, rounded to one decimal place.
-- Use FTE numbers for enrollment.
-- In case of tie, sort by campus name.

SELECT Campus, Round(enrollments.FTE / faculty.FTE, 1)
FROM campuses
    INNER JOIN faculty on faculty.CampusId = Id
    INNER JOIN enrollments on enrollments.CampusId = Id
WHERE enrollments.Year = 2003 and enrollments.Year = faculty.Year AND
    enrollments.FTE / faculty.FTE <= ALL (
    SELECT enrollments.FTE / faculty.FTE
    FROM campuses
        INNER JOIN faculty on faculty.CampusId = Id
        INNER JOIN enrollments on enrollments.CampusId = Id
    WHERE enrollments.Year = 2003 and enrollments.Year = faculty.Year
);


USE `CSU`;
-- CSU-4
-- Among undergraduates studying 'Computer and Info. Sciences' in the year 2004, find the university with the highest percentage of these students (base percentages on the total from the enrollments table). Output the name of the campus and the percent of these undergraduate students on campus. In case of tie, sort by campus name.
select 
t1.Campus as campus,
round(t1.Ratio * 100.00, 1) as PercentCS
from 
(
    select campuses.Campus, (discEnr.Ug / enrollments.Enrolled) as Ratio 
    from campuses 
    join discEnr on discEnr.CampusId = campuses.Id
    join enrollments on enrollments.CampusId = campuses.Id
    join disciplines on disciplines.Id = discEnr.Discipline
    where discEnr.Year = 2004 and enrollments.Year = discEnr.Year and disciplines.Name = 'Computer and Info. Sciences'
) t1
where t1.Ratio = (select max(t2.Ratio) 
    from 
    (
        select campuses.Campus, (discEnr.Ug / enrollments.Enrolled) as Ratio 
        from campuses 
        join discEnr on discEnr.CampusId = campuses.Id
        join enrollments on enrollments.CampusId = campuses.Id
        join disciplines on disciplines.Id = discEnr.Discipline
        where discEnr.Year = 2004 and enrollments.Year = discEnr.Year and disciplines.Name = 'Computer and Info. Sciences'
    )t2
);


USE `CSU`;
-- CSU-5
-- For each year between 1997 and 2003 (inclusive) find the university with the highest ratio of total degrees granted to total enrollment (use enrollment numbers). Report the year, the name of the campuses, and the ratio. List in chronological order.
select year, campus, DPE
from 
(
    select enrollments.Year, campuses.Campus, (degrees.degrees/enrollments.Enrolled) as DPE
    from degrees
    join campuses on campuses.Id = degrees.CampusId
    join enrollments on (enrollments.CampusId = campuses.Id)
    where degrees.year between 1997 and 2003 and (enrollments.year = degrees.year)
) t1
where t1.DPE =
(
    select max(t2.DPE)
    from 
    (
        select enrollments.Year, (degrees.degrees/enrollments.Enrolled) as DPE
        from degrees
        join campuses on campuses.Id = degrees.CampusId
        join enrollments on (enrollments.CampusId = campuses.Id)
        where degrees.year between 1997 and 2003 and (enrollments.year = degrees.year)
    ) t2
    where t2.Year = t1.Year
)
order by t1.Year;


USE `CSU`;
-- CSU-6
-- For each campus report the year of the highest student-to-faculty ratio, together with the ratio itself. Sort output in alphabetical order by campus name. Use FTE numbers to compute ratios and round to two decimal places.
select t1.Campus, t1. Year, round(t1.Ratio, 2) as Ratio
from 
(
    select campuses.Campus, enrollments.Year, max(enrollments.FTE / faculty.FTE) as Ratio
    from campuses
    join faculty on faculty.CampusId = campuses.Id
    join enrollments on enrollments.CampusId = campuses.Id
    where enrollments.Year = faculty.Year
    group by enrollments.Year, campuses.Campus
) t1
where t1.Ratio =
(
    select max(t2.Ratio)
    from
    (
        select campuses.Campus, enrollments.Year, max(enrollments.FTE / faculty.FTE) as Ratio
        from campuses
        join faculty on faculty.CampusId = campuses.Id
        join enrollments on enrollments.CampusId = campuses.Id
        where enrollments.Year = faculty.Year
        group by enrollments.Year, campuses.Campus
    ) t2
    where t2.Campus = t1.Campus
)
order by t1.Campus;


USE `CSU`;
-- CSU-7
-- For each year for which the data is available, report the total number of campuses in which student-to-faculty ratio became worse (i.e. more students per faculty) as compared to the previous year. Report in chronological order.

select (t1.Year + 1) as year, count(*) as Campuses
from 
(
    select campuses.Campus, enrollments.Year, max(enrollments.FTE / faculty.FTE) as Ratio
    from campuses
    join faculty on faculty.CampusId = campuses.Id
    join enrollments on (enrollments.CampusId = campuses.Id)
    where enrollments.Year = faculty.Year
    group by enrollments.Year, campuses.Campus
) t1
where t1.Ratio <
(
    select max(t2.Ratio)
    from 
    (
        select campuses.Campus, enrollments.Year, max(enrollments.FTE / faculty.FTE) as Ratio
        from campuses
        join faculty on faculty.CampusId = campuses.Id
        join enrollments on (enrollments.CampusId = campuses.Id)
        where enrollments.Year = faculty.Year
        group by enrollments.Year, campuses.Campus
    ) t2
    where t1.Campus = t2.Campus and t2.Year = (t1.Year + 1)
)

group by year
order by year;


USE `MARATHON`;
-- MARATHON-1
-- Find the state(s) with the largest number of participants. List state code(s) sorted alphabetically.

select t1.State
from 
(
    select marathon.State, count(*) as c1
    from marathon
    group by marathon.State
) t1
where t1.c1 = (select max(t2.c2) 
    from 
    (
        select marathon.State, count(*) as c2
        from marathon
        group by marathon.State
    ) t2
)
order by t1.State;


USE `MARATHON`;
-- MARATHON-2
-- Find all towns in Rhode Island (RI) which fielded more female runners than male runners for the race. Include only those towns that fielded at least 1 male runner and at least 1 female runner. Report the names of towns, sorted alphabetically.

select tfemale.Town
from 
(
    select marathon.Town, count(*) as Females
    from marathon
    where  marathon.Sex = 'F' and marathon.State = 'RI'
    group by marathon.Town
) tfemale
join
(
    select marathon.Town, count(*) as Males
    from marathon
    where  marathon.Sex = 'M' and marathon.State = 'RI'
    group by marathon.Town
) tmale
on tmale.Town = tfemale.Town
where  Males < Females
order by tfemale.Town;


USE `MARATHON`;
-- MARATHON-3
-- For each state, report the gender-age group with the largest number of participants. Output state, age group, gender, and the number of runners in the group. Report only information for the states where the largest number of participants in a gender-age group is greater than one. Sort in ascending order by state code, age group, then gender.
select t1.State, t1.AgeGroup, t1.Sex, t1.c1
from 
(
    select marathon.State, marathon.Sex, marathon.AgeGroup, count(*) as c1
    from marathon
    group by marathon.State, marathon.Sex, marathon.AgeGroup
) t1
where t1.c1 =
(
    select MAX(t2.c2)
    from
    (
        select marathon.State, marathon.Sex, marathon.AgeGroup, count(*) as c2
        from marathon
        group by marathon.State, marathon.Sex, marathon.AgeGroup
    ) t2
    where t1.State = t2.State
) and t1.c1 > 1
order by t1.State, t1.AgeGroup, t1.Sex;


USE `MARATHON`;
-- MARATHON-4
-- Find the 30th fastest female runner. Report her overall place in the race, first name, and last name. This must be done using a single SQL query (which may be nested) that DOES NOT use the LIMIT clause. Think carefully about what it means for a row to represent the 30th fastest (female) runner.
select t1.Place, t1.FirstName, t1.LastName
from marathon t1
where t1.sex = 'F' and
(
    select count(*)
    from marathon t2
    where sex = 'F' and t1.Place > t2.Place
) = 30 - 1
group by t1.Place;


USE `MARATHON`;
-- MARATHON-5
-- For each town in Connecticut report the total number of male and the total number of female runners. Both numbers shall be reported on the same line. If no runners of a given gender from the town participated in the marathon, report 0. Sort by number of total runners from each town (in descending order) then by town.

select t1.Town,
CASE
    when t2.c2 is NULL then
        0
    else
        t2.c2
END as Men,

CASE
    when t2.c2 is NULL then
        t1.c1
    else
        t1.c1 - t2.c2
END as Women

from
(
    select marathon.Town, count(*) as c1
    from marathon
    where marathon.State = 'CT'
    group by marathon.Town
) t1
left join
(
    select marathon.Town, count(*) as c2
    from marathon
    where marathon.State = 'CT' and marathon.Sex = 'M'
    group by marathon.Town
) t2
on t2.Town = t1.Town
order by t1.c1 desc, t1.Town asc;


USE `KATZENJAMMER`;
-- KATZENJAMMER-1
-- Report the first name of the performer who never played accordion.

select Band.Firstname
from Band
where Band.Id not in
(
    select distinct Instruments.Bandmate
    from Instruments
    where Instruments.Instrument = 'accordion'
);


USE `KATZENJAMMER`;
-- KATZENJAMMER-2
-- Report, in alphabetical order, the titles of all instrumental compositions performed by Katzenjammer ("instrumental composition" means no vocals).

select Songs.Title
from Songs
where Songs.SongId not in
(
    select Vocals.Song
    from Vocals
)
order by Songs.Title;


USE `KATZENJAMMER`;
-- KATZENJAMMER-3
-- Report the title(s) of the song(s) that involved the largest number of different instruments played (if multiple songs, report the titles in alphabetical order).
select t1.Title
from 
(
    select Songs.SongId, Songs.Title, count(Instruments.Instrument) as c1
    from Songs
    join Instruments on Instruments.Song = Songs.SongId 
    group by Instruments.Song
) t1
where t1.c1 =
(select max(t2.c2)
from
    (
        select Songs.SongId, Songs.Title, count(Instruments.Instrument) as c2
        from Songs
        join Instruments on Instruments.Song = Songs.SongId 
        group by Instruments.Song
    ) t2
);


USE `KATZENJAMMER`;
-- KATZENJAMMER-4
-- Find the favorite instrument of each performer. Report the first name of the performer, the name of the instrument, and the number of songs on which the performer played that instrument. Sort in alphabetical order by the first name, then instrument.

select t1.Firstname, t1.Instrument, t1.c1
from
(
    select Band.Firstname, Band.Id, Instruments.Instrument, count(*) as c1
    from Band
    join Instruments on Instruments.Bandmate = Band.Id 
    group by Band.Id, Instruments.Instrument
) t1
where t1.c1 =
(
    select max(t2.c1)
    from
    (
        select Band.Firstname, Band.Id, Instruments.Instrument, count(*) as c1
        from Band
        join Instruments on Instruments.Bandmate = Band.Id 
        group by Band.Id, Instruments.Instrument
    ) t2
    where t1.Id = t2.id
)
order by t1.Firstname, t1.Instrument;


USE `KATZENJAMMER`;
-- KATZENJAMMER-5
-- Find all instruments played ONLY by Anne-Marit. Report instrument names in alphabetical order.
select t1.Instrument
from
(
    select distinct Instruments.Instrument
    from Band
    join Instruments on Instruments.Bandmate = Band.Id
    where Band.Firstname = 'Anne-Marit'
) t1
where Instrument not in
(
    select distinct Instruments.Instrument
    from Band
    join Instruments on Instruments.Bandmate = Band.Id
    where Band.Firstname != 'Anne-Marit'
)
order by t1.Instrument;


USE `KATZENJAMMER`;
-- KATZENJAMMER-6
-- Report, in alphabetical order, the first name(s) of the performer(s) who played the largest number of different instruments.

select t1.Firstname
from
(
    select Band.Firstname, Band.Id, count(distinct Instruments.Instrument) as c1
    from Band
    join Instruments on Instruments.Bandmate = Band.Id
    group by Band.Id
) t1
where t1.c1 = 
(select max(t2.c2)
    from
    (
        select Band.Firstname, Band.Id, count(distinct Instruments.Instrument) as c2
        from Band
        join Instruments on Instruments.Bandmate = Band.Id
        group by Band.Id
    ) t2
)
order by t1.Firstname;


USE `KATZENJAMMER`;
-- KATZENJAMMER-7
-- Which instrument(s) was/were played on the largest number of songs? Report just the names of the instruments, sorted alphabetically (note, you are counting number of songs on which an instrument was played, make sure to not count two different performers playing same instrument on the same song twice).
select t1.Instrument
from 
(
    select Instruments.Instrument, count(distinct Instruments.Song) as Songs
    from Instruments
    join Songs on Songs.SongId = Instruments.Song
    group by Instruments.Instrument
) t1
where t1.Songs = 
(select max(t2.Songs)
    from
    (
        select Instruments.Instrument, count(distinct Instruments.Song) as Songs
        from Instruments
        join Songs on Songs.SongId = Instruments.Song
        group by Instruments.Instrument
    ) t2
);


USE `KATZENJAMMER`;
-- KATZENJAMMER-8
-- Who spent the most time performing in the center of the stage (in terms of number of songs on which she was positioned there)? Return just the first name of the performer(s), sorted in alphabetical order.

select t1.Firstname 
from
(
    select Performance.Bandmate, Band.Firstname, count(*) as c1
    from Performance
    join Band on Band.Id = Performance.Bandmate
    where Performance.StagePosition = 'center'
    group by Performance.Bandmate
) t1
where t1.c1 = 
(select max(t2.c2)
    from
    (
        select Performance.Bandmate, Band.Firstname, count(*) as c2
        from Performance
        join Band on Band.Id = Performance.Bandmate
        where Performance.StagePosition = 'center'
        group by Performance.Bandmate
    ) t2
)
order by t1.Firstname;


